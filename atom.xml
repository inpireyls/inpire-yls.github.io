<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-06T13:33:42.210Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr闫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机基础知识</title>
    <link href="http://yoursite.com/2019/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/11/06/计算机基础知识/</id>
    <published>2019-11-06T13:29:24.756Z</published>
    <updated>2019-11-06T13:33:42.210Z</updated>
    
    <content type="html"><![CDATA[<p>1.讲解了常见网络设备<br>    线：双绞线，RJ45，水晶头<br>    网卡：<br>    hub：集线器，在物理上将信号放大，在逻辑上相当于电线<br>    交换机：OSI二层，mac-&gt;mac<br>    路由器：osi三层，ip-&gt;ip</p><p>2.讲解了基本网络结构<br>    internet<br>    WAN<br>    LAN<br>    局域网(LAN)-&gt;路由-&gt;互联网(WAN)<br>    网络拓扑图(各个设备间的逻辑联系)</p><p>3.讲解了OSI七层模型、TCP/IP模型、五层网络模型<br>    OSI七层：<br>        7<br>        6<br>        5<br>        4<br>        3<br>        2<br>        1<br>    TCP/IP四层：<br>        应用层<br>        传输层<br>        网络层<br>        网络接口层</p><pre><code>五层教学模型：    应用层    传输层    网络层    数据链路层    物理层</code></pre><p>扩展：<br>        查看谢希仁——《计算机网络》<br>        《TCP/IP卷一》<br>        《图解TCP/IP》——日本人<br>相邻的层之间关系要掌握，机器-&gt;机器之间网络，逐级封装</p><p>4.GNS3模拟环境的搭建和简单使用<br>    实现在OSI第一级<br>    PC-PC</p><pre><code>实现在OSI第二级PC-SWITCH-PC实现在OSI第三级PC-switch-router-switch-pc</code></pre><p>重点：了解各个层  包括协议<br>物理层协议有：EIA/TIA-232， EIA/TIA-499，V.35， V.24，RJ45， Ethernet， 802.3<br>2、数据链路层协议有：Frame Relay，HDLC，PPP， IEEE 802.3/802.2<br>3、网络层协议有：IP，IPX，AppleTalk DDP<br>4、传输层协议有：TCP，UDP，SPX<br>5、会话层协议有：RPC，SQL，NFS，NetBIOS，names，AppleTalk<br>6、表示层协议有：TIFF，GIF，JPEG，PICT，ASCII，EBCDIC，encryption<br>7、应用层协议有：FTP，WWW，Telnet，NFS，SMTP，Gateway，SNMP</p><p>1、应用层<br>与其它计算机进行通讯的一个应用，它是对应应用程序的通信服务的。例如，一个没有通信功能的字处理程序就不能执行通信的代码，从事字处理工作的程序员也不关心OSI的第7层。但是，如果添加了一个传输文件的选项，那么字处理器的程序员就需要实现OSI的第7层。<br>示例：TELNET，HTTP，FTP，NFS，SMTP等。<br>2、表示层<br>这一层的主要功能是定义数据格式及加密。例如，FTP允许你选择以二进制或ASCII格式传输。如果选择二进制，那么发送方和接收方不改变文件的内容。如果选择ASCII格式，发送方将把文本从发送方的字符集转换成标准的ASCII后发送数据。在接收方将标准的ASCII转换成接收方计算机的字符集。<br>示例：加密，ASCII等。<br>3、会话层<br>它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。<br>示例：RPC，SQL等。<br>4、传输层<br>这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。<br>示例：TCP，UDP，SPX。<br>5、网络层<br>这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。<br>示例：IP，IPX等。<br>6、数据链路层<br>它定义了在单个链路上如何传输数据。这些协议与被讨论的各种介质有关。<br>示例：ATM，FDDI等。<br>7、物理层<br>OSI的物理层规范是有关传输介质的特这些规范通常也参考了其他组织制定的标准。连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。物理层常用多个规范完成对所有细节的定义。<br>示例：Rj45，802.3等。</p><p>子网知识：<br>     知道ip地址和他的子网掩码<br>ip转二进制  子网转二进制<br>起始ip为   ip和子网二进制 有一为一 没一为零<br>广播地址 为子网二进制最后一位1后面前边二进制和起始二进制一样。<br>子网掩码分段<br>看最后一位多少个1<br>xxxxxxxx xxxxxxx xxxxxxx<br>一个1从左至右代表2的一次方划分为两个段<br>两个1是四个网络段<br>全为0就是1个段2的零次方<br>全为1就是2的八次方</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.讲解了常见网络设备&lt;br&gt;    线：双绞线，RJ45，水晶头&lt;br&gt;    网卡：&lt;br&gt;    hub：集线器，在物理上将信号放大，在逻辑上相当于电线&lt;br&gt;    交换机：OSI二层，mac-&amp;gt;mac&lt;br&gt;    路由器：osi三层，ip-&amp;gt;ip&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>tcp</title>
    <link href="http://yoursite.com/2019/11/06/tcp/"/>
    <id>http://yoursite.com/2019/11/06/tcp/</id>
    <published>2019-11-06T13:26:03.034Z</published>
    <updated>2019-11-06T13:26:03.034Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>点击图片去另一个网站</title>
    <link href="http://yoursite.com/2019/10/26/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E5%8E%BB%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2019/10/26/点击图片去另一个网站/</id>
    <published>2019-10-26T09:03:27.735Z</published>
    <updated>2019-10-26T08:08:47.972Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><meta charset="utf-8"><html><head>    <title>点击图片去另一个网站</title></head><body><pre><code>&lt;form&gt;   &lt;input type=&quot;image&quot; src=&quot;4.jpg&quot; width=&quot;120px&quot;&gt;&lt;/form&gt;&lt;!-- 找坐标使用 --&gt; &lt;img src=&quot;4.jpg&quot; usemap=&quot;#map1&quot; width=&quot;120px&quot;&gt; &lt;map name=&quot;map1&quot;&gt;   &lt;area href=&quot;hello.html&quot; shape=&quot;rect&quot; coords=&quot;0px,0px,120px,120px&quot;  target=&quot;_blank&quot;&gt;&lt;!-- 矩形 --&gt;   &lt;/area&gt;&lt;/map&gt;</code></pre><!-- map 和img绑定使用 使用时需要给map添加id属性和name属性，让usemap的属性引用map标签的id或者name，通常id和name一样 并配合area使用    area标签定义了图像中被赋予特殊含义的区域，它主要的值有alt、cooreds、href、shape、target等定义可点击的热点    cooreds属性定义：定义相关区域的坐标说明：和shape属性搭配使用1）当shape属性为rect时，代表相关区域为矩形，则cooreds属性值为(x1,y1,x2,y2),其中x1,y1为左上角的坐标，x2,y2为右下角的坐标；2）当shape属性为circle时，代表相关区域为圆形，则cooreds属性值为(x,y,radius),其中x,y为圆形的中心坐标，radius为圆形的半径；3）当shape属性为poly时，代表相关区域为多边形，则cooreds属性值为(x1,y1,x2,y2,x3,y3......xn,yn),规定了多边形各个顶点的坐标，由于浏览器会自动闭合多边形，所以尾部坐标不必与第一个坐标相等。shape（三个值）rect（矩形）circle（圆形）poly（多边形）target ：在何处打开目标的连接（新建的  连接另一个链接）自身属性值：_blank --><img src="4.jpg" usemap="#map2" width="120px">      <map name="map2">        <area href="hello.html" shape="circle" coords="56px,51px,50px"  target="_blank"><!-- 圆 -->        </area>     </map></body></html><!-- alt 图片加载失败时备用文本内容 在超链接里嵌入图像a结合创建基于图像的超链接<a href=""><img src=""><a/>usemap 里边必须有#####！！！！！不然不会调用 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;点击图片去另一个网站&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form&amp;gt;
   &amp;lt;input type
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo安装配置</title>
    <link href="http://yoursite.com/2019/10/25/hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/10/25/hexo安装配置/</id>
    <published>2019-10-25T14:32:36.633Z</published>
    <updated>2019-10-25T13:48:04.002Z</updated>
    
    <content type="html"><![CDATA[<p>一.下载git CMD<br>   node.js<br>   打开本地cmd 安装hexo框架工具<br>   npm install hexo-cli -g<br>   安装完毕后<br>   打开命令行工具输入ssh-keygen -t rsa -C<br>   生成ssh密钥公钥<br>   注册github账号<br>   打开git 创建仓库<br>   name （自己名命后期网站使用）.github.io<br>   点击create repository 选择setting Deploy keys adddeploy<br>   将生成的密钥（C:\Users\Yls.ssh）复制到key框里边<br>   测试是否连接成功<br>   ssh <a href="mailto:-Tgit@github.com" target="_blank" rel="noopener">-Tgit@github.com</a><br>   打开__config.yml<br>   修改repo *注意：后边都要有一格空格<br>   <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:自己注册的用户名/自己注册的用户名.github.io.git<br>   打开终端输入hexo d （传输）<br>   输入hexo s 出来一网址复制打开就可以看到自己的博客<br>   发布自己的博客可以在（C:\Users\Yls\Desktop\boke\blog\public）添加内容文件等</p><pre><code> hexo clean  //清理缓存hexo g    //重新生成博客代码hexo d   //部署到本地hexo new &quot;我个人博客的第一篇博客，哈哈哈...&quot;hexo g   //生成网页hexo d  //部署到远端(github)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一.下载git CMD&lt;br&gt;   node.js&lt;br&gt;   打开本地cmd 安装hexo框架工具&lt;br&gt;   npm install hexo-cli -g&lt;br&gt;   安装完毕后&lt;br&gt;   打开命令行工具输入ssh-keygen -t rsa -C&lt;br&gt;   生成
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/25/hello-world/"/>
    <id>http://yoursite.com/2019/10/25/hello-world/</id>
    <published>2019-10-25T06:29:28.899Z</published>
    <updated>2019-10-25T06:29:28.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
