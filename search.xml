<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP</title>
      <link href="/2019/11/06/PHP/"/>
      <url>/2019/11/06/PHP/</url>
      
        <content type="html"><![CDATA[<p>PHP mysql：<br>js验证非常容易绕过为什么还保留js验证？<br>1.允许使用大小写加特殊字符加数字作为密码<br>2.文件上传  大小/类型限制<br>3.一些简单的，无关安全的验证放在前端完成，减少服务器压力服务器资源耗尽，导致拒绝服务<br>mysql常用命令：<br>mysql-h localhost-uroot -proot 登录数据库<br>create database test; （英文分号结束语句）创建数据库<br>show databases;   查看mysql中存在的所有数据库<br>改<br>库/表/列内容<br>改列内容：update name set name =’zhoujielun’ where id=3;<br>查<br>库/表/列内容<br>查库：show databases;<br>差表：show tables;<br>查列属性：show columns form 表名;<br>查列内容：select *  from 表名;<br>增<br>库/表//列内容<br>增库：create database数据库名;<br>增表：create table表名（列1 列1的数据类型，列2   列2数据类型…）<br>增列内容：insert into 表名 value（列1的值，列2的值 。。。。）<br>删<br>库/表/列内容<br>删库 drop database 库名<br>删表 drop table name;<br>删列内容： delete from 表名 where<br>限定条件：#where 限定是bool型的限定 true的会被执行<br>PHP环境<br>apache+php+mysql<br>iis+asp+access/mysql<br>tomcat+jsp+oracle</p><p>PHP操作mysql的五个部分：<br>连接数据库软件<br>指定需要查询的数据库<br>执行sql语句<br>获取执行结果<br>关闭数据库连接</p><p>php-&gt;mysql服务（host:localhost）-&gt;指定的数据库（test,dvwa,xxxx）</p><p>php连接数据库<br>$conn =mysqli_connect(“mysql-host”,”mysql_user”,”mtsql_password”);</p><p>pdo扩展<br>$dsn=”mysql:dbname=database_name;host=mysql_host”;<br>$user=”dbuser”;<br>$password=”dbpass”;<br>$dbh=new PDO($dsn,$user,$password);</p><p>PHP文件包含<br>include();<br>require();<br>include_once();<br>require_once();<br>include（或require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的的文件中。<br>区别：如果用include语句会引用某个文件并区找到它，脚本会继续执行<br>  当文件被应用程序请求时，使用require<br>  当文件不是必需的，且应用程序在文件未找到时应该继续执行时，使用include</p><p>  cookie（身份标识） 存在于客户端 cookie不是本地生成，是服务器生成的第一次请求的时候发cookie字段<br>  使用：<br>  set_cookie()函数的使用，必须在每个需要用到session的页面使用这个函数，才能够开启session功能，生成的cookie信息存储在$_COOKIE全局数据中。<br>  删除cookie<br>  1.setcookie（’uname’）;<br>2.setcookie（’uname’,”time()-1）;<br>  设置uname的cookie的过期<br>  session 存在于服务器<br>  session_start()函数的使用，必须要在每个需要用到session的页面使用这个函数，才能开启session功能<br>  生成的seeion信息，存储在全局变量$_SESSION数组中<br>  销毁<br>  session_destroy();//销毁服务器中的session，但并不会释放当前的session变量，也不会删除保存子啊客户端cookie中的sessionID<br>  注销<br>  unset（$_SESSION[“”];）//删除在session中注册的用户变量<br>  $_SESSION -array();  //将某个用户在session中注册的变量全部清除<br>  *** 不要unset（$_SESSION）,后果 $_SESSION[“newsession”]=’’</p><p>两者区别<br>SESSION信息时存在服务器上的，但session id是存在http头部cookie中的。当然php的session存放方法时多样化的，这样就算就用cookie一样可以跟踪</p><p>cookie时完全保持在客户端的例 IE firefox 当客户端禁止cookie时将不再使用</p><p>变量<br>1.局部变量<br>   eg.函数体内定义的<br>2.全局变量<br> eg.脚本中定义的，并且能在其它自定义函数中使用的<br> 3.超全局变量<br>     $_GET[]<br>     $_POST[]<br>     $_COOKIE[]<br>     $_SESSION[]<br>     $_FILE</p><p>PHP文件上传 PHP.INI配置<br>file_uploads 默认值on  确定服务器上的PHP脚本是否可以接受http文件上传<br>upload_max_filesize 默认值2mb  </p><p>限制php处理上传文件大小的最大值，此值必须小于post_max_size值</p><p>post_max_size 默认值8mb </p><p>限制通过POST方法可以接受信息的最大值，此值应当大于upload_max_filesize的值，因为除了上传的文件，还可能传递其他的表单域。</p><p>upload_tmp_dir  默认值null  上传文件的临时路径，可以是一个绝对路径，这个目录对于拥有此服务器进程额用户名必须时可写的。上传的文件再处理之前必须成功的传输到服务器，所以必须指定一个位置。默认null则为操作系统的临时文件夹。</p><p>$_files<br>$_FILES[“myfile”][“name”]   客户端机器文件的原名称，包含扩展名</p><p>$_FILES[“myfile”][“size”]  已上传文件的大小，单位为字节</p><p>$_FILES[“myfile”][“tmp_name”]  文件上传后存储的临时位置</p><p>$_FILE[“myfile”][“error”]<br>伴随文件上传时产生的错误信息：<br>0：表示没发生任何错误，文件上传成功。<br>1：表示上传文件大小超出了 upload_max_filesize限制<br>2：表示上传文件超出了HTML表单中MAX_FILE_SIZE限制<br>3：文件只有部分被上传<br>4：表示没有上传任何文件<br>$_FILE[“myfile”][“type”] 获取从客户端上传文件的MIME</p><p>上传常用函数</p><p>移动文件到新位置<br>move_uploaded_file(string $filename,string $destination) :bool</p><p>判断文件是否通过HTTP POST上传：<br>is_uploaded_file (string$filename):name</p><p>传值  html中的from action 需要设置好！！！</p><p>PHP流程控制</p><p>while  只要指定的条件成立，则循坏执行代码块<br>do。。while  首先执行一次代码块，然后在指定的条件成立时重复这个循坏<br>for    循坏执行代码块指定的次数<br>foreach   根据数组中每个元素来循环代码块</p><p>数值交换<br>$num1=10<br>$num2 =20</p><p>$num3=</p><p>$num3=$num1;<br>$num1=$num2;<br>$num2=$num3;</p><p>预定义变量<br>.预定义变量又叫超全局变量，包括：$_GET，$_POST，$_SERVER，$_REQUEST，$GLOBALS，$_COOKIE，$_SESSION等大约10个</p><p>php中，自定义的变量的作用域分两种：全局变量（函数外）、局部作用域（函数内）</p><p>但预定义变量的作用域称为“超全局作用域”：全局作用域+局部作用域的总和（函数内外全都可用）</p><p>$_GET变量（数组）</p><p>Get这个词，常常出现在<form action=”XXX.php” method=”get”>…</form></p><p>这叫做“表单以get方式提交数据”</p><p>则$_GET这个预定义数组变量，就是指以这种方式提交的所有数据的集合（数组）</p><p>$_POST变量（数组）</p><p>类似于$_GET变量（数组），$_POST代表页面通过post方式提交过来的数据所形成的数组。</p><p>作用是：用户填写表单数据，并提交后，会将数据发送（提交）给页面abc.php，也可以理解为“打开”该网页。</p><p>接受post数据的形式为（XXX.php网页中）：</p><p>$_REQUEST变量（数组）</p><p>$_REQUEST数组,并不是一个独立的数据来源，而是$_GET数据和$_POST数据的“总和”，即$_REQUEST数组中包括了所有$_GET数据和$_POST数据——由系统自动存储的。</p><p>通常$_GET数据和$_POST数据不会“同时出现”，$_REQUEST数组就代表了其中之一。<br>————————————————</p><p>$_SERVER变量（数据）</p><p>该变量存储了服务器端或客户端的一些请求信息或设置信息，比较多，而且不同的服务器和不同的请求页面，其数据项都可能不同。</p><p>$GLOBALS变量（数据）</p><p>似乎是一个多余的变量：它只是把我们定义的所有全局变量存储到该数组中：</p><p>变量名就是该数组的下标（键名），变量值就是对应的值。</p><p>定义参数 参数把全局拿到局部来用的<br>可以定义多个参数 多个参数用，分割<br>参数可以有默认值用=给默认值<br>参数名字就是一个就是一个变量的名字就是局部变量的名字<br>在函数内部可以直接打印在调用的时候可以给参数进行传值可以传全局变量也可以传写死的字符串<br>返回值把函数内部变量返回到全局来用<br>参数只能把全局变量拿到函数内容来用<br>参数<br>定义函数的时候同时定义参数<br>调用函数的时候同步传入参数<br>返回值<br>在函数内部任意一行可以写return后边跟数据的结果或者变量的名字<br>一个数据的值，在函数外面就可以接收到这个返回值。</p><p>函数内部的结果怎么返回给全局<br>返回值关键字 return<br>在函数里边发现return  后边代码不会在执行在return之前可以执行<br>返回多个变量<br>通过数组或者对象来返回</p><p>php只支持返回一个值<br>php里任何一个有值的编码都可以称为表达式</p><p>函数做到：函数的基础语法<br>如何定义函数 调用函数 给函数传值 如何获取和定义函数的返回值</p><p>类和对象<br>如何解决什么问题  如何解决问题</p><p>类和对象两个东西</p><p>类是用class编写的片段</p><p>对象是从类中识别化而来<br>类一个 对象可以有多个<br>魔术方法 __construct   两个下划线！！<br>允许开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作<br>include 包含的时候出错后面代码还会执行requite不会继续执行后续代码</p><p>使用函数面向过程  使用对象面向对象</p><p>mysqli   类  用于连接数据库等</p><p>mysqli对象mysql_result调用featch_array如果说结果集中有数据就会调用出最新的一条记录<br>重复调用依次显示后面的记录<br>如果没有记录就返回null</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识</title>
      <link href="/2019/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>1.讲解了常见网络设备<br>    线：双绞线，RJ45，水晶头<br>    网卡：<br>    hub：集线器，在物理上将信号放大，在逻辑上相当于电线<br>    交换机：OSI二层，mac-&gt;mac<br>    路由器：osi三层，ip-&gt;ip</p><p>2.讲解了基本网络结构<br>    internet<br>    WAN<br>    LAN<br>    局域网(LAN)-&gt;路由-&gt;互联网(WAN)<br>    网络拓扑图(各个设备间的逻辑联系)</p><p>3.讲解了OSI七层模型、TCP/IP模型、五层网络模型<br>    OSI七层：<br>        7<br>        6<br>        5<br>        4<br>        3<br>        2<br>        1<br>    TCP/IP四层：<br>        应用层<br>        传输层<br>        网络层<br>        网络接口层</p><pre><code>五层教学模型：    应用层    传输层    网络层    数据链路层    物理层</code></pre><p>扩展：<br>        查看谢希仁——《计算机网络》<br>        《TCP/IP卷一》<br>        《图解TCP/IP》——日本人<br>相邻的层之间关系要掌握，机器-&gt;机器之间网络，逐级封装</p><p>4.GNS3模拟环境的搭建和简单使用<br>    实现在OSI第一级<br>    PC-PC</p><pre><code>实现在OSI第二级PC-SWITCH-PC实现在OSI第三级PC-switch-router-switch-pc</code></pre><p>重点：了解各个层  包括协议<br>物理层协议有：EIA/TIA-232， EIA/TIA-499，V.35， V.24，RJ45， Ethernet， 802.3<br>2、数据链路层协议有：Frame Relay，HDLC，PPP， IEEE 802.3/802.2<br>3、网络层协议有：IP，IPX，AppleTalk DDP<br>4、传输层协议有：TCP，UDP，SPX<br>5、会话层协议有：RPC，SQL，NFS，NetBIOS，names，AppleTalk<br>6、表示层协议有：TIFF，GIF，JPEG，PICT，ASCII，EBCDIC，encryption<br>7、应用层协议有：FTP，WWW，Telnet，NFS，SMTP，Gateway，SNMP</p><p>1、应用层<br>与其它计算机进行通讯的一个应用，它是对应应用程序的通信服务的。例如，一个没有通信功能的字处理程序就不能执行通信的代码，从事字处理工作的程序员也不关心OSI的第7层。但是，如果添加了一个传输文件的选项，那么字处理器的程序员就需要实现OSI的第7层。<br>示例：TELNET，HTTP，FTP，NFS，SMTP等。<br>2、表示层<br>这一层的主要功能是定义数据格式及加密。例如，FTP允许你选择以二进制或ASCII格式传输。如果选择二进制，那么发送方和接收方不改变文件的内容。如果选择ASCII格式，发送方将把文本从发送方的字符集转换成标准的ASCII后发送数据。在接收方将标准的ASCII转换成接收方计算机的字符集。<br>示例：加密，ASCII等。<br>3、会话层<br>它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。<br>示例：RPC，SQL等。<br>4、传输层<br>这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。<br>示例：TCP，UDP，SPX。<br>5、网络层<br>这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。<br>示例：IP，IPX等。<br>6、数据链路层<br>它定义了在单个链路上如何传输数据。这些协议与被讨论的各种介质有关。<br>示例：ATM，FDDI等。<br>7、物理层<br>OSI的物理层规范是有关传输介质的特这些规范通常也参考了其他组织制定的标准。连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。物理层常用多个规范完成对所有细节的定义。<br>示例：Rj45，802.3等。</p><p>子网知识：<br>     知道ip地址和他的子网掩码<br>ip转二进制  子网转二进制<br>起始ip为   ip和子网二进制 有一为一 没一为零<br>广播地址 为子网二进制最后一位1后面前边二进制和起始二进制一样。<br>子网掩码分段<br>看最后一位多少个1<br>xxxxxxxx xxxxxxx xxxxxxx<br>一个1从左至右代表2的一次方划分为两个段<br>两个1是四个网络段<br>全为0就是1个段2的零次方<br>全为1就是2的八次方</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>点击图片去另一个网站</title>
      <link href="/2019/10/26/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E5%8E%BB%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/10/26/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E5%8E%BB%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><meta charset="utf-8"><html><head>    <title>点击图片去另一个网站</title></head><body><pre><code>&lt;form&gt;   &lt;input type=&quot;image&quot; src=&quot;4.jpg&quot; width=&quot;120px&quot;&gt;&lt;/form&gt;&lt;!-- 找坐标使用 --&gt; &lt;img src=&quot;4.jpg&quot; usemap=&quot;#map1&quot; width=&quot;120px&quot;&gt; &lt;map name=&quot;map1&quot;&gt;   &lt;area href=&quot;hello.html&quot; shape=&quot;rect&quot; coords=&quot;0px,0px,120px,120px&quot;  target=&quot;_blank&quot;&gt;&lt;!-- 矩形 --&gt;   &lt;/area&gt;&lt;/map&gt;</code></pre><!-- map 和img绑定使用 使用时需要给map添加id属性和name属性，让usemap的属性引用map标签的id或者name，通常id和name一样 并配合area使用    area标签定义了图像中被赋予特殊含义的区域，它主要的值有alt、cooreds、href、shape、target等定义可点击的热点    cooreds属性定义：定义相关区域的坐标说明：和shape属性搭配使用1）当shape属性为rect时，代表相关区域为矩形，则cooreds属性值为(x1,y1,x2,y2),其中x1,y1为左上角的坐标，x2,y2为右下角的坐标；2）当shape属性为circle时，代表相关区域为圆形，则cooreds属性值为(x,y,radius),其中x,y为圆形的中心坐标，radius为圆形的半径；3）当shape属性为poly时，代表相关区域为多边形，则cooreds属性值为(x1,y1,x2,y2,x3,y3......xn,yn),规定了多边形各个顶点的坐标，由于浏览器会自动闭合多边形，所以尾部坐标不必与第一个坐标相等。shape（三个值）rect（矩形）circle（圆形）poly（多边形）target ：在何处打开目标的连接（新建的  连接另一个链接）自身属性值：_blank --><img src="4.jpg" usemap="#map2" width="120px">      <map name="map2">        <area href="hello.html" shape="circle" coords="56px,51px,50px"  target="_blank"><!-- 圆 -->        </area>     </map></body></html><!-- alt 图片加载失败时备用文本内容 在超链接里嵌入图像a结合创建基于图像的超链接<a href=""><img src=""><a/>usemap 里边必须有#####！！！！！不然不会调用 -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装配置</title>
      <link href="/2019/10/25/hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/25/hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>一.下载git CMD<br>   node.js<br>   打开本地cmd 安装hexo框架工具<br>   npm install hexo-cli -g<br>   安装完毕后<br>   打开命令行工具输入ssh-keygen -t rsa -C<br>   生成ssh密钥公钥<br>   注册github账号<br>   打开git 创建仓库<br>   name （自己名命后期网站使用）.github.io<br>   点击create repository 选择setting Deploy keys adddeploy<br>   将生成的密钥（C:\Users\Yls.ssh）复制到key框里边<br>   测试是否连接成功<br>   ssh <a href="mailto:-Tgit@github.com" target="_blank" rel="noopener">-Tgit@github.com</a><br>   打开__config.yml<br>   修改repo *注意：后边都要有一格空格<br>   <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:自己注册的用户名/自己注册的用户名.github.io.git<br>   打开终端输入hexo d （传输）<br>   输入hexo s 出来一网址复制打开就可以看到自己的博客<br>   发布自己的博客可以在（C:\Users\Yls\Desktop\boke\blog\public）添加内容文件等</p><pre><code> hexo clean  //清理缓存hexo g    //重新生成博客代码hexo d   //部署到本地hexo new &quot;我个人博客的第一篇博客，哈哈哈...&quot;hexo g   //生成网页hexo d  //部署到远端(github)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
